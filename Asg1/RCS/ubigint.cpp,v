head	1.8;
access;
symbols;
locks;
comment	@// @;


1.8
date	2017.07.10.06.15.28;	author -;	state -;
branches;
next	1.7;

1.7
date	2017.07.10.05.57.01;	author -;	state -;
branches;
next	1.6;

1.6
date	2017.07.10.05.54.17;	author -;	state -;
branches;
next	1.5;

1.5
date	2017.07.10.05.45.49;	author -;	state -;
branches;
next	1.4;

1.4
date	2017.07.10.05.40.14;	author -;	state -;
branches;
next	1.3;

1.3
date	2017.07.10.05.35.37;	author -;	state -;
branches;
next	1.2;

1.2
date	2017.07.10.05.33.00;	author -;	state -;
branches;
next	1.1;

1.1
date	2017.07.10.05.22.36;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: ubigint.cpp,v 1.7 2017-07-09 22:57:01-07 - - $

#include <cctype>
#include <cstdlib>
#include <exception>
#include <stack>
#include <stdexcept>
#include <string>
#include <string.h>
#include <stdio.h>
using namespace std;

#include "ubigint.h"
#include "debug.h"

ubigint::ubigint (const string& that): ubig_value(ubigvalue_t()) {
   DEBUGF ('~', "that = \"" << that << "\"");
   for (char digit: that) {
      if (not isdigit (digit)) {
         throw invalid_argument ("ubigint::ubigint(" + that + ")");
      }
      ubig_value.push_back(digit);
   }
   int i = 0;
   int j = ubig_value.size()-1;
    while(j > i){
       char temp = ubig_value[i];
       ubig_value[i] = ubig_value[j];
       ubig_value[j] = temp;
       i++;
       j--;
   }
}

ubigint ubigint::operator+ (const ubigint& that) const {
    string ubig_string = "";
    int carry = 0;
    uint i = 0;
    uint j = 0;
    while(i <= that.ubig_value.size() || j <= this->ubig_value.size()){
        int a = 0;
        int b = 0;
        if(j < this->ubig_value.size()){
            a = static_cast<int>(this->ubig_value[i] - '0');
        }
        if(i < that.ubig_value.size()){
            b = static_cast<int>(that.ubig_value[j] - '0');
        }
        int x = a + b + carry;
        if(x > 9){
            carry = 1;
            x = x % 10;
        } else {
            carry = 0;
        }
        if(i >= that.ubig_value.size() &&
           j >= this->ubig_value.size() && x == 0) {
            return ubigint (ubig_string);
        }
        j++;
        i++;
        string temp = to_string(x);
        ubig_string = temp + ubig_string;
    }
    return ubigint (ubig_string);
}

ubigint ubigint::operator- (const ubigint& that) const {
   string ubig_string = "";
   int carry = 0;
   uint j = 0;
   for(uint i = 0; i < this->ubig_value.size(); ++i) {
       int a = static_cast<int>(this->ubig_value[i] - '0');
       int b = 0;
       if(j < that.ubig_value.size()){
          b = static_cast<int>(that.ubig_value[j] - '0');
       }
       int x;
       a = a + carry;
       if(a > b) {
           x =  a - b;
           carry = 0;
       } else if(a < b) {
           carry = -1;
           a = a + 10;
           x = a - b;
       } else if(a == b) {
           x = 0;
           carry = 0;
       }
       if(i >= this->ubig_value.size() &&
          j >= that.ubig_value.size() &&
          x == 0){
           while(ubig_string.front() == '0'){
               ubig_string.erase(0,1);
           }
           return ubigint (ubig_string);
        }
        string temp = to_string(x);
        ubig_string = temp + ubig_string;
        j++;
   }
   while(ubig_string.front() == '0'){
       ubig_string.erase(0,1);
   }
   return ubigint (ubig_string);
}

ubigint ubigint::operator* (const ubigint& that) const {
    ubigvalue_t vector;
    string ubig_string = "";
    int m = this->ubig_value.size();
    int n = that.ubig_value.size();
    for(int i = 0; i < m + n; ++i){
        vector.push_back('0');
    }
    for(uint i = 0; i < this->ubig_value.size(); ++i) {
        int c = 0;
        int d;
        for(uint j = 0; j < that.ubig_value.size(); ++j) {
            d = static_cast<int>(vector[i + j] - '0') +
                static_cast<int>((that.ubig_value[j] - '0')*
                    (this->ubig_value[i] - '0')) + c;
            vector[i + j] = (d % 10) + '0';
            c = d / 10;
            string ubig_string = "";
            for (int z = 0; z < m + n; ++z) {
                ubig_string = ubig_string +
                              static_cast<char>(vector[z]);
            }
        }
        vector[i + n] = c + '0';
    }
    if(vector[m + n - 1] == '0'){
      vector[m + n - 1] = 0;
      for (int i = 0; i < m + n - 1; ++i) {
        ubig_string = static_cast<char>(vector[i]) + ubig_string;
      }
    } else {
      for (int i = 0; i < m + n; ++i) {
        ubig_string = static_cast<char>(vector[i]) + ubig_string;
      }
    }
    return ubigint(ubig_string);
}

void ubigint::multiply_by_2() {
    int c = 0;
    for(uint i = 0; i < this->ubig_value.size(); ++i) {
        int x = static_cast<int>(this->ubig_value[i] - '0');
        x = x * 2;
        x = x + c;
        c = x / 10;
        x = x % 10;
        this->ubig_value[i] = x + '0';
    }
    if(c > 0) {
        this->ubig_value.push_back(c + '0');
    }
}

void ubigint::divide_by_2() {
    int c = 0;
    for(int i = this->ubig_value.size() - 1; i >= 0; --i) {
        int x = static_cast<int>(this->ubig_value[i] - '0' + c);
        c = (x % 2) * 10;
        x = x / 2;
        this->ubig_value[i] = x + '0';
    }
    if(this->ubig_value[this->ubig_value.size() - 1] == '0'){
        this->ubig_value.pop_back();
    }
}


struct quo_rem { ubigint quotient; ubigint remainder; };
quo_rem udivide (const ubigint& dividend, ubigint divisor) {
   // Note: divisor is modified so pass by value (copy).
   ubigint zero = ubigint("0");
   if (divisor == zero) throw domain_error ("udivide by zero");
   ubigint power_of_2 = ubigint("1");
   ubigint quotient = ubigint("0");
   // left operand, dividend
   ubigint remainder = ubigint(dividend.tostring());
   while (divisor < remainder) {
      divisor.multiply_by_2();
      power_of_2.multiply_by_2();
   }
   while (zero < power_of_2) {
      if ((divisor < remainder) || (divisor == remainder)) {
         remainder = remainder - divisor;
         quotient = quotient + power_of_2;
      }
      divisor.divide_by_2();
      power_of_2.divide_by_2();
   }
   return {.quotient = quotient, .remainder = remainder};
}

string ubigint::tostring() const {
   string ubig_string = "";
   for (uint i = 0; i < this->ubig_value.size(); ++i) {
       ubig_string = static_cast<char>(this->ubig_value[i]) +
                     ubig_string;
   }
   return ubig_string;
}

ubigint ubigint::operator/ (const ubigint& that) const {
    ubigint result = ubigint(that.tostring());
   return udivide (*this, result).quotient;
}

ubigint ubigint::operator% (const ubigint& that) const {
   ubigint result = ubigint(that.tostring());
   return udivide (*this, result).remainder;
}

bool ubigint::operator == (const ubigint& that) const {
    if(that.ubig_value.size() > this->ubig_value.size()){
        return false;
    }
    if(that.ubig_value.size() < this->ubig_value.size()){
        return false;
    }
    for(uint i = 0; i < this->ubig_value.size(); ++i){
        int a = static_cast<int>(that.ubig_value[i] - '0');
        int b = static_cast<int>(this->ubig_value[i] - '0');
        if(a > b){
            return false;
        }
        if(a < b){
            return false;
        }
    }
    return true;
}

bool ubigint::operator< (const ubigint& that) const {
    if(that.ubig_value.size() > this->ubig_value.size()){
        return true;
    }
    if(that.ubig_value.size() < this->ubig_value.size()){
        return false;
    } else {
        for(int i = this->ubig_value.size() - 1; i >= 0; --i){
            int a = static_cast<int>(that.ubig_value[i] - '0');
            int b = static_cast<int>(this->ubig_value[i] - '0');
            if(a > b){
                return true;
            }
            if(a < b){
                return false;
            }
        }
    }
    return false;
}

string ubigint::tostringfinal() const{
   string ubig_string = "";
   int x = 0;
   for (int i = this->ubig_value.size() - 1; i >= 0; --i) {
       if(x == 69){
           ubig_string = ubig_string + "\\\n";
           x = 0;
       }
       ++x;
       ubig_string = ubig_string +
                     static_cast<char>(this->ubig_value[i]);
   }
   return ubig_string;
}

ostream& operator<< (ostream& out, const ubigint& that) {    
   return out << that.tostringfinal();
}

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.6 2017-07-09 22:54:17-07 - - $
d38 2
a39 2
    int i = 0;
    int j = 0;
d71 2
a72 2
   int j = 0;
   for(int i = 0; i < this->ubig_value.size(); ++i) {
d114 1
a114 1
    for(int i = 0; i < m+n; ++i){
d117 1
a117 1
    for(int i = 0; i < this->ubig_value.size(); ++i) {
d120 1
a120 1
        for(int j = 0; j < that.ubig_value.size(); ++j) {
d149 1
a149 1
    for(int i = 0; i < this->ubig_value.size(); ++i) {
d202 1
a202 1
   for (int i = 0; i < this->ubig_value.size(); ++i) {
d226 1
a226 1
    for(int i = 0; i < this->ubig_value.size(); ++i){
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.5 2017-07-09 22:45:49-07 - - $
d117 1
a117 1
    for(int i = 0; i < this->ubig_value.size() ;++i){
d149 1
a149 1
    for(int i = 0;i < this->ubig_value.size(); ++i) {
d163 1
a163 1
    int c =0;
d269 2
a270 1
       ubig_string = ubig_string + static_cast<char>(this->ubig_value[i]);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.4 2017-07-09 22:40:14-07 - - $
d44 1
a44 1
            a = (int)(this->ubig_value[i] - '0');
d47 1
a47 1
            b = (int)(that.ubig_value[j] - '0');
d56 2
a57 1
        if(i >= that.ubig_value.size() && j >= this->ubig_value.size() && x == 0){
d72 2
a73 2
   for(int i = 0;i<this->ubig_value.size();++i){
       int a = (int)(this->ubig_value[i] - '0');
d76 1
a76 1
          b = (int)(that.ubig_value[j] - '0');
d80 1
a80 1
       if(a > b){
d83 1
a83 1
       } else if(a < b){
d87 1
a87 1
       } else if(a == b){
d91 3
a93 1
       if(i >= this->ubig_value.size() && j >= that.ubig_value.size() && x == 0){
d96 2
a97 2
               }
               return ubigint (ubig_string);
d120 4
a123 2
        for(int j = 0; j < that.ubig_value.size(); ++j){
            d = (int)(vector[i + j] - '0') + (int)((that.ubig_value[j] - '0')*(this->ubig_value[i] - '0')) + c;
a125 2
            
            
d128 3
a130 2
                ubig_string = ubig_string + static_cast<char>(vector[z]);
                }
d149 1
a149 1
    for(int i = 0;i < this->ubig_value.size(); ++i){
d157 1
a157 1
    if(c > 0){
d164 1
a164 1
    for(int i = this->ubig_value.size() - 1; i >= 0; --i){
d183 2
a184 1
   ubigint remainder = ubigint(dividend.tostring()); // left operand, dividend
d203 2
a204 1
       ubig_string = static_cast<char>(this->ubig_value[i]) + ubig_string;
d246 1
a246 1
        for(int i = this->ubig_value.size() - 1; i >= 0;--i){
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.3 2017-07-09 22:35:37-07 - - $
d124 2
a125 2
            for (int z = 0; z < m+n; ++z) {
                ubig_string = ubig_string + (char)vector[z];
d131 8
a138 3
        vector[m + n - 1] = 0;
        for (int i = 0; i < m + n - 1; ++i) {
       ubig_string = (char)vector[i] + ubig_string;
d140 1
a140 6
    }    else {
        for (int i = 0; i < m + n; ++i) {
       ubig_string = (char)vector[i] + ubig_string;
    }
    }
   return ubigint(ubig_string);
d146 1
a146 1
        int x = (int)(this->ubig_value[i] - '0');
d160 2
a161 2
    for(int i = this->ubig_value.size()-1; i >= 0; --i){
        int x = (int)(this->ubig_value[i] - '0' + c);
d163 1
a163 1
        x = x/2;
d195 1
a195 1
string ubigint::tostring() const{
d198 1
a198 1
       ubig_string = (char)this->ubig_value[i] + ubig_string;
d221 2
a222 2
        int a = (int)(that.ubig_value[i] - '0');
        int b = (int)(this->ubig_value[i] - '0');
d260 1
a260 1
           x=0;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.2 2017-07-09 22:33:00-07 - - $
d26 1
a26 1
    while(j>i){
d40 1
a40 1
    while(i <= that.ubig_value.size() || j <=this->ubig_value.size()){
d50 1
a50 1
        if(x>9){
d111 1
a111 1
    for(int i = 0; i<m+n;++i){
d114 1
a114 1
    for(int i = 0;i<this->ubig_value.size();++i){
d117 3
a119 3
        for(int j = 0;j<that.ubig_value.size();++j){
            d = (int)(vector[i+j] - '0') + (int)((that.ubig_value[j] - '0')*(this->ubig_value[i] - '0')) + c;
            vector[i+j] = (d % 10) + '0';
d128 1
a128 1
        vector[i+n] = c + '0';
d130 3
a132 3
    if(vector[m+n-1] == '0'){
        vector[m+n-1] = 0;
        for (int i = 0; i < m+n-1; ++i) {
d136 1
a136 1
        for (int i = 0; i < m+n; ++i) {
d144 2
a145 2
    int c =0;
    for(int i = 0;i<this->ubig_value.size();++i){
d160 1
a160 1
    for(int i = this->ubig_value.size()-1;i>=0;--i){
d166 1
a166 1
    if(this->ubig_value[this->ubig_value.size()-1] == '0'){
d220 1
a220 1
    for(int i =0; i<this->ubig_value.size();++i){
d240 3
a242 3
        for(int i =this->ubig_value.size()-1; i>=0;--i){
            int a = (int)(that.ubig_value[i] - '0');
            int b = (int)(this->ubig_value[i] - '0');
d257 1
a257 1
   for (int i = this->ubig_value.size()-1; i >=0; --i) {
d263 1
a263 1
       ubig_string = ubig_string + (char)this->ubig_value[i];
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.14 2016-06-23 17:21:26-07 - - $
d81 18
a98 18
		   carry = 0;
	   } else if(a < b){
		   carry = -1;
		   a = a + 10;
		   x = a - b;
	   } else if(a == b){
		   x = 0;
		   carry = 0;
	   }
	   if(i >= this->ubig_value.size() && j >= that.ubig_value.size() && x == 0){
		   while(ubig_string.front() == '0'){
			   ubig_string.erase(0,1);
			   }
			   return ubigint (ubig_string);
		}
	    string temp = to_string(x);
		ubig_string = temp + ubig_string;
		j++;
d101 1
a101 1
	   ubig_string.erase(0,1);
d107 33
a139 33
	ubigvalue_t vector;
	string ubig_string = "";
	int m = this->ubig_value.size();
	int n = that.ubig_value.size();
	for(int i = 0; i<m+n;++i){
		vector.push_back('0');
	}
	for(int i = 0;i<this->ubig_value.size();++i){
		int c = 0;
		int d;
		for(int j = 0;j<that.ubig_value.size();++j){
			d = (int)(vector[i+j] - '0') + (int)((that.ubig_value[j] - '0')*(this->ubig_value[i] - '0')) + c;
			vector[i+j] = (d % 10) + '0';
			c = d / 10;
			
			
			string ubig_string = "";
			for (int z = 0; z < m+n; ++z) {
				ubig_string = ubig_string + (char)vector[z];
				}
		}
		vector[i+n] = c + '0';
	}
	if(vector[m+n-1] == '0'){
		vector[m+n-1] = 0;
		for (int i = 0; i < m+n-1; ++i) {
	   ubig_string = (char)vector[i] + ubig_string;
	}
	}	else {
		for (int i = 0; i < m+n; ++i) {
	   ubig_string = (char)vector[i] + ubig_string;
	}
	}
d144 12
a155 12
	int c =0;
	for(int i = 0;i<this->ubig_value.size();++i){
		int x = (int)(this->ubig_value[i] - '0');
		x = x * 2;
		x = x + c;
		c = x / 10;
		x = x % 10;
		this->ubig_value[i] = x + '0';
	}
	if(c > 0){
		this->ubig_value.push_back(c + '0');
	}
d159 10
a168 10
	int c =0;
	for(int i = this->ubig_value.size()-1;i>=0;--i){
		int x = (int)(this->ubig_value[i] - '0' + c);
		c = (x % 2) * 10;
		x = x/2;
		this->ubig_value[i] = x + '0';
	}
	if(this->ubig_value[this->ubig_value.size()-1] == '0'){
		this->ubig_value.pop_back();
	}
d198 1
a198 1
	   ubig_string = (char)this->ubig_value[i] + ubig_string;
d204 1
a204 1
	ubigint result = ubigint(that.tostring());
d214 17
a230 17
	if(that.ubig_value.size() > this->ubig_value.size()){
		return false;
	}
	if(that.ubig_value.size() < this->ubig_value.size()){
		return false;
	}
	for(int i =0; i<this->ubig_value.size();++i){
		int a = (int)(that.ubig_value[i] - '0');
		int b = (int)(this->ubig_value[i] - '0');
		if(a > b){
			return false;
		}
		if(a < b){
			return false;
		}
	}
	return true;
d234 18
a251 18
	if(that.ubig_value.size() > this->ubig_value.size()){
		return true;
	}
	if(that.ubig_value.size() < this->ubig_value.size()){
		return false;
	} else {
		for(int i =this->ubig_value.size()-1; i>=0;--i){
			int a = (int)(that.ubig_value[i] - '0');
			int b = (int)(this->ubig_value[i] - '0');
			if(a > b){
				return true;
			}
			if(a < b){
				return false;
			}
		}
	}
	return false;
d258 6
a263 6
	   if(x == 69){
		   ubig_string = ubig_string + "\\\n";
		   x=0;
	   }
	   ++x;
	   ubig_string = ubig_string + (char)this->ubig_value[i];
d268 1
a268 1
ostream& operator<< (ostream& out, const ubigint& that) {	
@


1.1
log
@-
@
text
@d26 6
a31 6
   while(j>i){
	   char temp = ubig_value[i];
	   ubig_value[i] = ubig_value[j];
	   ubig_value[j] = temp;
	   i++;
	   j--;
d36 29
a64 29
	string ubig_string = "";
	int carry = 0;
	int i = 0;
	int j = 0;
	while(i <= that.ubig_value.size() || j <=this->ubig_value.size()){
		int a = 0;
		int b = 0;
		if(j < this->ubig_value.size()){
			a = (int)(this->ubig_value[i] - '0');
		}
		if(i < that.ubig_value.size()){
			b = (int)(that.ubig_value[j] - '0');
		}
		int x = a + b + carry;
		if(x>9){
			carry = 1;
			x = x % 10;
		} else {
			carry = 0;
		}
		if(i >= that.ubig_value.size() && j >= this->ubig_value.size() && x == 0){
			return ubigint (ubig_string);
		}
		j++;
		i++;
		string temp = to_string(x);
		ubig_string = temp + ubig_string;
	}
   return ubigint (ubig_string);
d68 1
a68 1
	string ubig_string = "";
d72 9
a80 9
	   int a = (int)(this->ubig_value[i] - '0');
	   int b = 0;
	   if(j < that.ubig_value.size()){
		   b = (int)(that.ubig_value[j] - '0');
	   }
	   int x;
	   a = a + carry;
	   if(a > b){
		   x =  a - b;
@
